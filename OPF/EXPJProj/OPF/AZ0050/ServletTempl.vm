#set($EJModifyMode = true)
/*
#if(${EJModifyMode})
 * \$Source: D:/EXPJCVS/EXPJPROJ/expjprsaUV2/EXPJProj/OPF/AZ0050/ServletTempl.vm,v $
 *
 * Copyright (c) 2003-2005 NEC Corporation.
 * Copyright (c) 2003-2005 NEC Informatec Systems,Ltd.
#else
 * COPYRIGHT (C) 2002,2003   NEC INFORMATEC SYSTEMS, LTD.
#end
 *
 * ALL RIGHTS RESERVED  BY   NEC INFORMATEC SYSTEMS, LTD.
 * THIS PROGRAM MUST BE USED SOLELY  FOR  THE PURPOSE FOR
 * WHICH IT WAS FURNISHED BY NEC INFORMATEC SYSTEMS, LTD,
 * NO PART OF THIS PROGRAM MAY BE REPRODUCED OR DISCLOSED
 * TO  OTHERS,  IN ANY FORM  WITHOUT  THE  PRIOR  WRITTEN
 * PERMISSION OF NEC INFORMATEC SYSTEMS, LTD.
 * USE OF COPYRIGHT NOTICE  DOES NOT EVIDENCE PUBLICATION
 * OF THE PROGRAM
 *
 * NEC INFORMATEC SYSTEMS  CONFIDENTIAL  AND  PROPRIETARY
 *
 * テンプレート履歴：
#if(${EJModifyMode})
 * EXPJ    (2005/01/31),SRCGEN対応、メッセージの多言語対応(MessageStruct)
 * EXPJ    (2004/09/08),FLASH SUBMIT方法変更
 * EXPJ    (2004/06/24),FLASH連携メソッド追加
 * EXPJ    (2004/04/20),CSV アップロード機能追加
 * EXPJ    (2004/04/09),コメント修正 "リスエスと"->"リクエスト"
 * EXPJ    (2004/04/06),user_implement で}}指定するべき部分が{{になっていたのを修正
 *                      setScreenCommonParamsメソッドにパラメータを追加（印刷用）
 *                      StructDump時のtoString()を削除（Null値対策）
 * EXPJ    (2004/04/01),CsvOutメソッドの処理を削除→ControlのCsvOutメソッドにて実施する
 *                      user_implement_dev:<setScreenMoveParams>を復活
 *                      正常動作のトランザクション完了時にはconn.commitを行うように修正
 * EXPJ    (2004/03/20),レビュー結果を反映
 * EXPJ    (2004/03/13),送信元ボタン登録追加
 * EXPJ    (2004/03/09),setScreenMoveParamsメソッドからsetScreenCommonParamsメソッドを分離
 *                      setScreenMoveParams呼出をreloadメソッドに戻し、イベントハンドラからはsetScreenCommonParams呼出
 *                      Exceptionの処理を修正
 *                      SystemLog出力の問題点対応
 * EXPJ    (2004/03/04),メッセージ系部品改造対応
 *                     ,CsvOutメソッドの処理を追加
 *                     ,Printメソッドの処理をEXPLANNER/J用に改造
 * EXPJ    (2004/03/04),メッセージ系部品改造対応
 * EXPJ    (2004/03/03),履歴を修正
 *                     ,Orteusテンプレートのかつてのバグを修正 "reloadEvent"→"reload"
 *                     ,reloadEventメソッドでcontrolを"Select"で呼び出すのを中止
 *                     ,画面遷移パラメータの取得処理呼び出しをreloadEventメソッドからイベントハンドラに移動
 * EXPJ    (2004/03/02),EXPLANNER/J用に改造
#end
 * 4.0.3.8 (2004/08/02),TRUST-Vプロジェクトのフィードバック（ページ制御部品対応）
 * 4.0.3.7 (2004/05/24),ダウンロード対応を追加。
 * 4.0.3.6 (2004/05/21),event-type=printを追加。コネクションの接続・切断方法のバグを修正
 * 4.0.3.5 (2004/05/07),Webサーバタイプの初期化を削除、defaultEventのnextUrl処理、ログファイルの初期化修正
 *                      setReferURL()->getReferURL()、コネクションの接続・切断方法変更
 * 4.0.3.4 (2004/04/07),isClickメソッドのユーザ記述定義ミスを修正
 * 4.0.3.3 (2004/02/23),Control::getPdfFileName()対応
 * 4.0.3.2 (2004/01/23),帳票ツール連携用コードを追加
 * 4.0.3.1 (2003/10/24),isClickメソッドにOwnCoding領域を追加
 * 4.0.3.0 (2003/10/07),bFLG_DISCONNECT_defaultEventの初期値をtrueに修正
 * 4.0.2.0 (2003/08/05),Sesstion Timeout時の遷移指定追加
 * 4.0.1.0 (2003/05/19),Connectionフラグの定義修正
 * 4.0.0.1 (2003/04/24),Structバインド修正
 * 4.0.0.0 (2003/04/23),クラス名標準化対応
 * 3.0.1.0 (2003/03/31),control method呼び出し,reload eventでのConnection close追加
 * 3.0.0.0 (2003/03/19),Time,Timestamp型対応
 * 2.1.0.0 (2002/12/17),User OwnCode部ロギング追加,Logging package修正
 * 2.0.0.1 (2002/07/05),Connection対応
 * 2.0.0.0 (2002/05/27),new foundation対応
 *
#if(!${EJModifyMode})
 * バージョン管理キーワード設定
 * $Date: 2011/04/15 09:05:43 $
 * $Revision: 1.1 $
 * $Log: ServletTempl.vm,v $
 * Revision 1.1  2011/04/15 09:05:43  suganuma
 *
 * 679: マシン環境により、EJStudioVer3.0.2の自動コーディング部品ServletTempl.vmで
 * 　　　AZ0050でAZ0050010Servlet.javaを生成すると
 * 　　　コンパイルエラー「try 文のコードが大きすぎます。」が発生する場合が報告
 *
 * 再チェックイン？
 *
 * 2011/02/17 10:50 にチェックインしたCVSMailerの通知があったが、実際にはチェックインされていない為。
 * CVSNTもWinCVSもオープンソースなので、不具合があっても仕方ない・・・。
 *
 * Revision 1.1  2011/02/17 01:50:49  suganuma
 * 679: マシン環境により、EJStudioVer3.0.2の自動コーディング部品ServletTempl.vmでAZ0050でAZ0050010Servlet.javaを生成するとコンパイルエラー「try 文のコードが大きすぎます。」が発生する場合が報告
 *
 * Revision 1.1  2005/08/10 09:36:58  expj
 * EXPJStudio-tools-framework-expj配下の登録漏れ分の追加
 * (2005/5/12 V2.0.0リリース分を2005/8/10に追加)
 *
#end
 */

#if(${package})
package ${package};
#end

import com.nec.jp.orteus.util.*;
import com.nec.jp.orteus.msg.util.*;
import com.nec.jp.orteus.msg.core.*;

import com.nec.jp.orteus.xaf.foundation.*;
import com.nec.jp.orteus.xaf.common.*;
import com.nec.jp.orteus.xaf.util.*;
import com.nec.jp.orteus.xaf.wa.*;

import com.nec.jp.orteus.util.logging.*;

#if(${EJModifyMode})
import com.nec.jp.orteus.expj.util.*;
import com.nec.jp.orteus.expj.csv.*;
import com.nec.jp.orteus.expj.flash.FlashServletRequest;
#end

import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.util.Date;
import java.util.*;
import java.text.*;
import java.sql.*;
import java.io.*;

#usercode("dev" "import")
	// TODO: ここにimportパッケージを記述してください
#end

#usercode("dev" "header")
#if(${EJModifyMode})
/**
 * CLASS     : ${ctrl.name}Servlet クラス
 * ファイル・クラス説明
 * @author \$Author\$
 * @version \$Revision\$ \$Date\$
 *
 */
#else
/**
 * CLASS     : ${ctrl.name}Servlet クラス
 * VERSION   : 1.0.0.0
 * DATE      : <日付>
 * AUTHOR    : <開発者名>
 * HISTORY
 *           : 1.0.0.0、<日付>、新規作成
 *         [ : <バージョン>、<日付>、<内容> ]
 *                        ・ ・ ・
 */
#end
#end

public class ${ctrl.name}Servlet extends HttpServlet
{

	//////////////////////////////

	#usercode("dev" "class_head")
		// TODO: ユーザ定義のコードを記述してください
	#end

#if(${EJModifyMode})
	/**
	 * ThrowableのprintStackTrace()を文字列で返却します
	 * @param   Throwable e  Exception
	 * @return  String  変換後文字列
	 */
	private String getStackTrace(Throwable e)
	{
		ByteArrayOutputStream temp = new ByteArrayOutputStream();
		try {
			if (e == null) {
				throw new Exception();
			}
			PrintStream out = new PrintStream(temp);
			e.printStackTrace(out);
			return temp.toString();
		} catch ( Exception ex ) {
			return "";
		} finally {
			try {
				temp.close();
			} catch (IOException ee){}
		}
	}

	/** 
	 * 画面遷移パラメータ取得
	 * @param params  Hashtableクラスインスタンス
	 * @param control ${source.name}Controlクラスインスタンス
	 */
	private void setScreenMoveParams(Hashtable params, ${source.name}Control control)
	{
		if (params == null) {
			control.setScreenMoveFlg (false);
			control.setScreenId((String)null);
			return;
		}

		if (control == null) {
			control.setScreenMoveFlg (false);
			control.setScreenId((String)null);
			return;
		}

		//画面遷移からの呼び出しであるかどうかを示すパラメータを取得
		String[] screenMoveFlg = null;
		if(params.containsKey("SCREEN_MOVE_FLG")) {
			screenMoveFlg = (String[])params.get("SCREEN_MOVE_FLG");
		}
		else {
			screenMoveFlg = (String[])null;
		}
		if(screenMoveFlg == null) {
			control.setScreenMoveFlg (false);
		}
		else {
			control.setScreenMoveFlg (true);
		}

#usercode("dev" "<setScreenMoveParams>")
		//画面遷移からの検索パラメータ(画面固有)を取得し、controlの変数へ格納
		// TODO: ユーザ定義のコードを記述してください
#end

	}

	/** 
	 * 画面共通パラメータ取得
	 * @param params  Hashtableクラスインスタンス
	 * @param control ${source.name}Controlクラスインスタンス
	 */
	private void setScreenCommonParams(Hashtable params, ${source.name}Control control)
	{
		if (params == null) {
			control.setButtonType((String)null);
			control.setPdfOutputType("0");
			control.setPdfOutputPrinter((String)null);
			return;
		}

		if (control == null) {
			control.setButtonType((String)null);
			control.setPdfOutputType("0");
			control.setPdfOutputPrinter((String)null);
			return;
		}

		// 押下ボタン種別
		if(params.containsKey("SUBMIT_BUTTON_TYPE")) {
			control.setButtonType(((String[])params.get("SUBMIT_BUTTON_TYPE"))[0]);
		}
		else {
			control.setButtonType((String)null);
		}

		// 帳票出力タイプ
		if(params.containsKey("PRINTER_TYPE")) {
			control.setPdfOutputType(((String[])params.get("PRINTER_TYPE"))[0]);
		}
		else {
			control.setPdfOutputType("0");
		}

		// 帳票出力先
		if(params.containsKey("SELECTED_PRINTER")) {
			control.setPdfOutputPrinter(((String[])params.get("SELECTED_PRINTER"))[0]);
		}
		else {
			control.setPdfOutputPrinter((String)null);
		}

		// 帳票出力リストパターン
		if(params.containsKey("PRINT_PATTERN")) {
			control.setPdfOutputListPattern(((String[])params.get("PRINT_PATTERN"))[0]);
		}
		else {
			control.setPdfOutputListPattern("2");
		}

		// 帳票出力リスト行
		if(params.containsKey("PRINT_TARGET")) {
			control.setPdfOutputListLine((String[])params.get("PRINT_TARGET"));
		}
		else {
			control.setPdfOutputListLine((String[])null);
		}

		// 送信元プログラムID取り込み
		if(params.containsKey("SUBMIT_PROGRAM")) {
			control.setProgramId(((String[])params.get("SUBMIT_PROGRAM"))[0]);
		}
		else {
			control.setProgramId((String)null);
		}

		// 送信元画面ID取り込み
		if(params.containsKey("SUBMIT_SCREEN")) {
			control.setScreenId(((String[])params.get("SUBMIT_SCREEN"))[0]);
		}
		else {
			control.setScreenId((String)null);
		}

		// 新規画面フラグ
		String[] newScreenFlg = null;
		if(params.containsKey("NEW_SCREEN_FLG")) {
			newScreenFlg = (String[])params.get("NEW_SCREEN_FLG");
		}
		else {
			newScreenFlg = (String[])null;
		}
		if((newScreenFlg != null) && ("FALSE".equalsIgnoreCase(newScreenFlg[0]))) {
			control.setNewScreenFlg(false);
		}
		else {
			control.setNewScreenFlg(true);
		}

#usercode("dev" "<setScreenCommonParams>")
		// TODO: ユーザ定義のコードを記述してください
#end

	}
#end

	//////////////////////////////

#foreach($method in ${ctrl.mets.method})
#* *##if(${method.BaseMethod} == "onClick")
#*   *##if(${method.name} == "initialEvent")
	/**
	 * 初回時のみ実行される処理
	 * initialEventメソッド
	 *
#*     *##foreach($entity in ${method.entities.entity})
#*       *##if(${entity.description} != "null" && ${entity.description} != "")
	 * ${entity.description}

#*       *##end
#*     *##end
	 * @param request HttpRequestクラスインスタンス
	 * @param response HttpResponseクラスインスタンス
	 * @param so HttpSessionクラスインスタンス
	 * @param params Hashtableクラスインスタンス
	 * @param control ${source.name}Controlクラスインスタンス
	 * @return 移動先のＵＲＬ
	 */
#*   *##end
#* *##end
#end
	public String initialEvent(
					HttpServletRequest request,
					HttpServletResponse response,
					HttpSession so,
					Hashtable params,
					${source.name}Control control ) throws BusinessProcessException, ServletException, IOException, MessageApiException
	{
		String nextUrl = null;		// 移動先ＵＲＬ
		${source.name}Entity entity = control.entity;
		${source.name}Struct struct = control.struct;

		try {
			// 初期処理
			CoreTools.initialize(request);

			// ログファイルの初期化
#if(${EJModifyMode})
			DisplayMessageUtil objMessageDummy = new DisplayMessageUtil(request.getRemoteUser());
#end
			objMessage.m_writer.setUserID(request.getRemoteUser());

			nextUrl = DEFAULT_TARGET;

			Logger logger = Logger.getLogger("${Package}");
			logger.entering("${ctrl.name}Servlet"+":USER="+request.getRemoteUser(),"initialEvent");
		#usercode("dev" "<initialEvent>")
			// TODO: ユーザ定義のコードを記述してください
#if(${EJModifyMode})
//			LogWriter.write( Level.ALL, "${source.name}"+" $Revision: 1.1 $" );
#else
			LogWriter.write( Level.ALL, "${source.name}"+" $Revision: 1.1 $" );
#end
			control.control_eventHandller("initial");
		#end
			logger.exiting("${ctrl.name}Servlet"+":USER="+request.getRemoteUser(),"initialEvent");

		} catch ( FoundationException e ) {
#if(${EJModifyMode})
//			e.printStackTrace();
			ExpjException ee = new ExpjException(e, "ZZ01106");
			throw ee;
#else
			e.printStackTrace();
			LogWriter.write(Level.ALL, objMessage.getIDMsg("${source.name}-E999","初期処理"));
#end
		}

		return nextUrl;
	}

#foreach($method in ${ctrl.mets.method})
#* *##if(${method.BaseMethod} == "onClick")
#*   *##if(${method.name} == "initialEvent")
	/**
	 * リロード時のみ実行される処理
	 * reloadEventメソッド
	 *
#*     *##foreach($entity in ${method.entities.entity})
#*       *##if(${entity.description} != "null" && ${entity.description} != "")
	 * ${entity.description}

#*       *##end
#*     *##end
	 * @param request HttpRequestクラスインスタンス
	 * @param response HttpResponseクラスインスタンス
	 * @param so HttpSessionクラスインスタンス
	 * @param params Hashtableクラスインスタンス
	 * @param control ${source.name}Controlクラスインスタンス
	 * @return 移動先のＵＲＬ
	 */
#*   *##end
#* *##end
#end
	public String reloadEvent(
					HttpServletRequest request,
					HttpServletResponse response,
					HttpSession so,
					Hashtable params,
					${source.name}Control control ) throws BusinessProcessException, ServletException, IOException, MessageApiException
	{
		String nextUrl = null;		// 移動先ＵＲＬ
		${source.name}Entity entity = control.entity;
		${source.name}Struct struct = control.struct;
#set($pageCnt = 0)
#foreach($method in ${ctrl.mets.method})
#* *##if(${method.name} != "initialEvent")
#*   *##foreach($arg in ${method.cells.arg})
#*     *##if(${arg.param} == "orteusBeginRow" || ${arg.param} == "orteusEndRow")
#*       *##set($pageCnt = ${pageCnt} + 1)
#*     *##end
#*   *##end
#* *##end
#end
#if(${pageCnt} == 2)
		getSessionParameters(so, params, struct);
#end
		Logger logger = Logger.getLogger("${Package}");
		logger.entering("${ctrl.name}Servlet"+":USER="+request.getRemoteUser(),"reloadEvent");

#if(${EJModifyMode})
		// 画面遷移パラメータの取得
		setScreenMoveParams(params, control);
		if (control.isScreenMove()) {
			getSessionParameters(so, params, struct);
		}
#end

		#usercode("dev" "<reloadEvent>")
		try {
			// TODO: ユーザ定義のコードを記述してください
			control.control_eventHandller("reload");
		} catch ( FoundationException e ) {
#if(${EJModifyMode})
//			e.printStackTrace();
//			LogWriter.write(Level.ALL, objMessage.getIDMsg("${source.name}-E999","リロード処理"));
			ExpjException ee = new ExpjException(e, "ZZ01106");
			throw ee;
#else
			e.printStackTrace();
			LogWriter.write(Level.ALL, objMessage.getIDMsg("${source.name}-E999","リロード処理"));
#end
		}
		#end
		logger.exiting("${ctrl.name}Servlet"+":USER="+request.getRemoteUser(),"reloadEvent");

		return nextUrl;
	}

#foreach($method in ${ctrl.mets.method})
#* *##if(${method.BaseMethod} == "UserDef")
	/**
	 * ${method.name}メソッド
	 * ：ユーザ定義メソッド
	 *
	 * @param request HttpRequestクラスインスタンス
	 * @param response HttpResponseクラスインスタンス
	 */
	public void ${method.name}(
					HttpServletRequest request,
					HttpServletResponse response) throws BusinessProcessException, ServletException, IOException
	{
		Logger logger = Logger.getLogger("${Package}");
		logger.entering("${ctrl.name}Servlet"+":USER="+request.getRemoteUser(),"${method.name}");
		#usercode("dev" "<${ctrl.name}>")
			// TODO: ユーザ定義のコードを記述してください
#if(${EJModifyMode})
		try {
			control.control_eventHandller("${method.name}");
		} catch ( FoundationException e ) {
//			e.printStackTrace();
			ExpjException ee = new ExpjException(e, "ZZ01106");
			throw ee;
		}
#end
		#end
		logger.exiting("${ctrl.name}Servlet"+":USER="+request.getRemoteUser(),"${method.name}");

		return;
	}

#* *##elseif(${method.BaseMethod} == "onClick")
#*   *##if(${method.name} != "initialEvent")
	/**
#*     *##if(${method.args.arg.get(0).param} != "null" && ${method.args.arg.get(0).param} != "")
	 * ${method.args.arg.get(0).param}ボタン押下時に実行される処理です。
#*     *##else
	 * ${method.args.arg.get(1).param}ボタン押下時に実行される処理です。
#*     *##end
	 *
#*     *##foreach($entity in ${method.entities.entity})
#*       *##if(${entity.description} != "null" && ${entity.description} != "")
	 * ${entity.description}

#*       *##end
#*     *##end
	 * @param request HttpRequestクラスインスタンス
	 * @param response HttpResponseクラスインスタンス
	 * @param so HttpSessionクラスインスタンス
	 * @param params Hashtableクラスインスタンス
	 * @param control ${source.name}Controlクラスインスタンス
	 */
	public String onClick${method.name}(
					HttpServletRequest request,
					HttpServletResponse response,
					HttpSession so,
					Hashtable params,
					${source.name}Control control ) throws BusinessProcessException, ServletException, IOException
	{
#*     *##if(${method.args.arg.get(2).param} != "null" && ${method.args.arg.get(2).param} != "")
		String nextUrl = "/${method.args.arg.get(2).param}";		// 移動先ＵＲＬ
		${source.name}Entity entity = control.entity;
		${source.name}Struct struct = control.struct;
#*     *##else
		String nextUrl = null;		// 移動先ＵＲＬ
		${source.name}Entity entity = control.entity;
		${source.name}Struct struct = control.struct;
#*     *##end
#*     *##if(${method.cells.arg.size()} > 0)
		getSessionParameters(so, params, struct);
#*     *##end

		Logger logger = Logger.getLogger("${Package}");
		logger.entering("${ctrl.name}Servlet"+":USER="+request.getRemoteUser(),"onClick${method.name}");
		#usercode("dev" "<onClick${method.name}>")
			// TODO: ユーザ定義のコードを記述してください
		try {
#if(${EJModifyMode})
#if(${method.name} == "CsvIn")
			control.setCsvReader(new CsvReader(request));
#end
#end
			control.control_eventHandller("${method.name}");
#if(${EJModifyMode})
#if(${method.name} == "CsvIn")
			control.setCsvReader(null);
#end
#end
#*       *##if(${method.name} == "print" || ${method.name} == "Print" || ${method.event-type} == "print")
#if(!${EJModifyMode})
			//			ダウンロード情報の格納場所を用意
			FileloadPropertyBean props = new FileloadPropertyBean();

			//			   ContentTypeをPDFに設定
			props.setContentType("application/pdf");
			//			   DispositionTypeをInlineにしてブラウザ内表示とする
			props.setDispositionType("inline");
			//			   ダウンロード時のファイル名指定
			props.setFile("${ctrl.name}.pdf");
			//			   ダウンロードファイルの指定
			props.setData((Object)control.getPdfFileName());

			//			   ダウンロードサーブレットにダウンロード処理を委譲
			request.setAttribute("props", props);
			nextUrl="/DownloadServlet";
#end
#*       *##elseif(${method.event-type} == "download")
			FileloadPropertyBean props = control.getFileloadProperty();

			//  ダウンロードサーブレットにダウンロード処理を委譲
			request.setAttribute("props", props);
			nextUrl="/DownloadServlet";
#*       *##end
		} catch(FoundationException e) {
#if(${EJModifyMode})
//			e.printStackTrace();
			// エラー処理を記述してください。
			ExpjException ee = new ExpjException(e, "ZZ01106");
			throw ee;
#else
			e.printStackTrace();
			// エラー処理を記述してください。
#end
		}
		#end
		logger.exiting("${ctrl.name}Servlet"+":USER="+request.getRemoteUser(),"onClick${method.name}");

		return nextUrl;
	}

#*   *##end
#* *##end
#end

	public void getSessionParameters(HttpSession so, Hashtable params, ${source.name}Struct struct)
	{
		String locale = (String) so.getAttribute("LOCALE");
		
#foreach($method in ${ctrl.mets.method})
#* *##if(${method.BaseMethod} == "onClick")
#*   *##if(${method.cells.arg.size()} > 0)
#*     *##if(${method.name} == "initialEvent")
#*       *##foreach($arg in ${method.cells.arg})
#*         *##if(${arg.in} == "out" || ${arg.in} == "inout")
		String[] ${arg.param} = ((params.containsKey("${arg.param}")) ? (String[])params.get("${arg.param}") : (String[])null);
#*         *##end
#*       *##end

#*       *##foreach($arg in ${method.cells.arg})
#*         *##if(${arg.in} == "out" || ${arg.in} == "inout")
#*           *##if(${arg.datatype} == "String")
		struct.set${arg.param}( ((${arg.param} == null) ? (${arg.datatype})null : ${arg.param}[0]) );
		struct.setList_${arg.param}(TypeConverter.convert(${arg.param}));
#*           *##else
#*             *##if(${arg.datatype} == "Date")
#*               *##if(${arg.format} == "SHORT")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Timestamp)null : TypeConverter.str2date(${arg.param}[0], locale, DateFormat.SHORT) );
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}, locale, DateFormat.SHORT));
#*               *##else
#*                 *##if(${arg.format} == "MEDIUM")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Timestamp)null : TypeConverter.str2date(${arg.param}[0], locale, DateFormat.MEDIUM));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}, locale, DateFormat.MEDIUM));
#*                 *##else
#*                   *##if(${arg.format} == "LONG")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Timestamp)null : TypeConverter.str2date(${arg.param}[0], locale, DateFormat.LONG));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}, locale, DateFormat.LONG));
#*                   *##else
#*                     *##if(${arg.format} == "FULL")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Timestamp)null : TypeConverter.str2date(${arg.param}[0], locale, DateFormat.FULL));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}, locale, DateFormat.FULL));
#*                     *##else
#*                       *##if(${arg.format} == "")
		if(${arg.param} == null || ${arg.param}.length <= 0)
			struct.set${arg.param}((java.sql.Timestamp)null);
		else
			struct.set${arg.param}( (${arg.param}[0] == null || ${arg.param}[0].length() <= 0) ? (java.sql.Timestamp)null : java.sql.Timestamp.valueOf(${arg.param}[0]));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}));
#*                       *##else
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Timestamp)null : TypeConverter.str2date(${arg.param}[0], locale, "${arg.format}"));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}, locale, "${arg.format}"));
#*                       *##end
#*                     *##end
#*                   *##end
#*                 *##end
#*               *##end
#*             *##else
#*               *##if(${arg.datatype} == "Time")
#*                 *##if(${arg.format} == "SHORT")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Time)null : TypeConverter.date2t(TypeConverter.str2date(${arg.param}[0], locale, DateFormat.SHORT)));
		struct.setList_${arg.param}(TypeConverter.str2dateTime(${arg.param}, locale, DateFormat.SHORT));
#*                 *##else
#*                   *##if(${arg.format} == "MEDIUM")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Time)null : TypeConverter.date2t(TypeConverter.str2date(${arg.param}[0], locale, DateFormat.MEDIUM)));
		struct.setList_${arg.param}(TypeConverter.str2dateTime(${arg.param}, locale, DateFormat.MEDIUM));
#*                   *##else
#*                     *##if(${arg.format} == "LONG")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Time)null : TypeConverter.date2t(TypeConverter.str2date(${arg.param}[0], locale, DateFormat.LONG)));
		struct.setList_${arg.param}(TypeConverter.str2dateTime(${arg.param}, locale, DateFormat.LONG));
#*                     *##else
#*                       *##if(${arg.format} == "FULL")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Time)null : TypeConverter.date2t(TypeConverter.str2date(${arg.param}[0], locale, DateFormat.FULL)));
		struct.setList_${arg.param}(TypeConverter.str2dateTime(${arg.param}, locale, DateFormat.FULL));
#*                       *##else
#*                         *##if(${arg.format} == "")
		if(${arg.param} == null || ${arg.param}.length <= 0)
			struct.set${arg.param}((java.sql.Time)null);
		else
			struct.set${arg.param}( (${arg.param}[0] == null || ${arg.param}[0].length() <= 0) ? (java.sql.Time)null : java.sql.Time.valueOf(${arg.param}[0]));
		struct.setList_${arg.param}(TypeConverter.str2dateTime(${arg.param}));
#*                         *##else
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Time)null : TypeConverter.date2t(TypeConverter.str2date(${arg.param}[0], locale, "${arg.format}")));
		struct.setList_${arg.param}(TypeConverter.str2dateTime(${arg.param}, locale, "${arg.format}"));
#*                         *##end
#*                       *##end
#*                     *##end
#*                   *##end
#*                 *##end
#*               *##else
#*                 *##if(${arg.datatype} == "Timestamp")
#*                   *##if(${arg.format} == "SHORT")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Timestamp)null : TypeConverter.date2ts(TypeConverter.str2date(${arg.param}[0], locale, DateFormat.SHORT)));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}, locale, DateFormat.SHORT));
#*                   *##else
#*                     *##if(${arg.format} == "MEDIUM")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Timestamp)null : TypeConverter.date2ts(TypeConverter.str2date(${arg.param}[0], locale, DateFormat.MEDIUM)));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}, locale, DateFormat.MEDIUM));
#*                     *##else
#*                       *##if(${arg.format} == "LONG")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Timestamp)null : TypeConverter.date2ts(TypeConverter.str2date(${arg.param}[0], locale, DateFormat.LONG)));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}, locale, DateFormat.LONG));
#*                       *##else
#*                         *##if(${arg.format} == "FULL")
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Timestamp)null : TypeConverter.date2ts(TypeConverter.str2date(${arg.param}[0], locale, DateFormat.FULL)));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}, locale, DateFormat.FULL));
#*                         *##else
#*                           *##if(${arg.format} == "")
		if(${arg.param} == null || ${arg.param}.length <= 0)
			struct.set${arg.param}((java.sql.Timestamp)null);
		else
			struct.set${arg.param}( (${arg.param}[0] == null || ${arg.param}[0].length() <= 0) ? (java.sql.Timestamp)null : java.sql.Timestamp.valueOf(${arg.param}[0]));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}));
#*                           *##else
		struct.set${arg.param}( (${arg.param} == null) ? (java.sql.Timestamp)null : TypeConverter.date2ts(TypeConverter.str2date(${arg.param}[0], locale, "${arg.format}")));
		struct.setList_${arg.param}(TypeConverter.str2date(${arg.param}, locale, "${arg.format}"));
#*                           *##end
#*                         *##end
#*                       *##end
#*                     *##end
#*                   *##end
#*                 *##else
#if(!${EJModifyMode})
#*                   *##if(${arg.datatype} == "Double")
		struct.set${arg.param}( ((${arg.param} == null) ? (${arg.datatype})null : TypeConverter.str2double(${arg.param}[0])) );
		struct.setList_${arg.param}(TypeConverter.str2double(${arg.param}, locale, "${arg.format}"));
#*                   *##elseif(${arg.datatype} == "Long")
		struct.set${arg.param}( ((${arg.param} == null) ? (${arg.datatype})null : TypeConverter.str2long(${arg.param}[0])) );
		struct.setList_${arg.param}(TypeConverter.str2long(${arg.param}, locale, "${arg.format}"));
#*                   *##elseif(${arg.datatype} == "Short")
		struct.set${arg.param}( ((${arg.param} == null) ? (${arg.datatype})null : TypeConverter.str2short(${arg.param}[0])) );
		struct.setList_${arg.param}(TypeConverter.str2short(${arg.param}, locale, "${arg.format}"));
#*                   *##elseif(${arg.datatype} == "Integer")
		struct.set${arg.param}( ((${arg.param} == null) ? (${arg.datatype})null : TypeConverter.str2integer(${arg.param}[0])) );
		struct.setList_${arg.param}(TypeConverter.str2integer(${arg.param}, locale, "${arg.format}"));
#*                   *##else
		if( (${arg.param} == null)||("".equals(${arg.param}[0])) ) {
		   struct.set${arg.param}( (${arg.datatype})null );
		} else {
		   struct.set${arg.param}( new ${arg.datatype}(${arg.param}[0]) );
		   struct.setList_${arg.param}(TypeConverter.convert(${arg.param}));
		}
#*                   *##end
#else
		if( (${arg.param} == null)||("".equals(${arg.param}[0])) ) {
		   struct.set${arg.param}( (${arg.datatype})null );
		} else {
		   struct.set${arg.param}( new ${arg.datatype}(${arg.param}[0]) );
		   struct.setList_${arg.param}(TypeConverter.convert(${arg.param}));
		}
#end
#*                 *##end
#*               *##end
#*             *##end
#*           *##end
#*         *##end
#*       *##end

#*     *##end
#*   *##end
#* *##end
#end
		return;
	}

	//////////////////////////////

	public static String DEFAULT_TARGET = "/${source.name}.jsp";          // 移動先URLの指定
	public static String JSP_BIND_NAME_Control = "a${source.name}Control"; // JSP先のバインド名(Control)の指定
	public static String JSP_BIND_NAME_Struct = "a${source.name}Struct";   // JSP先のバインド名(Struct)の指定
	public static int WEBSERVER_TYPE = 0;                               // Webサーバタイプの定義
	public static String MENU_TARGET = "/main.jsp";					// メニューページの設定
#if(${EJModifyMode})
	public static String ERROR_TARGET = "/ExpjMessage.jsp";					// エラーページの設定
#else
	public static String ERROR_TARGET = "error.jsp";					// エラーページの設定
#end
	public static String EVENT_STATUS = "event_status";					// Session Objectに格納するイベント状態のName
	public static String BEGIN_EVENT = "begin";							// Session Objectに格納する初期イベントの値
	public static String EXECUTE_EVENT = "execute";						// Session Objectに格納するリロードイベントの値

	//////////////////////////////

	/**
	 * ログ部品インスタンス
	 */
	public DisplayMessageUtil objMessage = new DisplayMessageUtil();

	/**
	 * デフォルトで実行される処理
	 *
	 * @param request HttpRequestクラスインスタンス
	 * @param response HttpResponseクラスインスタンス
	 * @return 移動先のＵＲＬ
	 */
	public String defaultEvent(
					HttpServletRequest request,
					HttpServletResponse response,
					HttpSession so,
					Hashtable params,
					${source.name}Control control,
					String refererURL ) throws BusinessProcessException, ServletException, IOException, MessageApiException
	{
		String nextUrl = null;		// 移動先ＵＲＬ
		${source.name}Entity entity = control.entity;
		${source.name}Struct struct = control.struct;

		if( so == null ) return ERROR_TARGET;
		if( refererURL == null ) return nextUrl;

		// 各画面の初期起動の判定
		if( (so.getAttribute(refererURL) == null)&&(so.getAttribute(refererURL+EVENT_STATUS) == null) ) {
			so.setAttribute(refererURL+EVENT_STATUS,BEGIN_EVENT);
			nextUrl = initialEvent(request, response, so, params, control);
			String nextUrlTmp = reloadEvent(request, response, so, params, control);
			if(nextUrlTmp != null) {
				nextUrl = nextUrlTmp;
			}
		} else {
			so.setAttribute(refererURL,BEGIN_EVENT);
			nextUrl = reloadEvent(request, response, so, params, control);
		}

		Logger logger = Logger.getLogger("${Package}");
		logger.entering("${ctrl.name}Servlet"+":USER="+request.getRemoteUser(),"defaultEvent");
		#usercode("dev" "<defaultEvent>")
			// TODO: ユーザ定義のコードを記述してください
		#end
		logger.exiting("${ctrl.name}Servlet"+":USER="+request.getRemoteUser(),"defaultEvent");

		return nextUrl;
	}

	/**
	 * イベントハンドラ
	 *
	 * @param request HttpRequestクラスインスタンス
	 * @param response HttpResponseクラスインスタンス
	 */
	public String eventHandling(
					HttpServletRequest request,
					HttpServletResponse response) throws ServletException, IOException
	{
		ManageContainer  container;
		HttpSession so;
		Hashtable     params  = null;
		String        target  = null;
		String        refererURL = null;
		${source.name}Control control;
		${source.name}Entity  entity = null;
		${source.name}Struct  struct = null;

		try {
			container = CoreTools.getContainer();
			if (request.getAttribute("MSG_SERVLET_FORWARDED") == null) {
				params = CoreTools.getParamsList(request);
			} else {
				// Servlet間遷移の場合はパラメータを設定しない。
				params = new Hashtable();
			}
			so = request.getSession();
			
			// Session Timeout時の処理
			if(so == null || so.getAttribute("UserId") == null) return MENU_TARGET;

			// 参照元URLの格納
			refererURL = getReferURL(request);

			if( (control = (${source.name}Control)so.getAttribute("${source.name}Control_"+request.getSession(false).getId())) == null ) {
				control = new ${source.name}Control();
				struct = control.struct;
				entity = control.entity;
				struct.setsUser_ID( request.getRemoteUser() );
				entity.setUsrId( request.getRemoteUser() );
				control.setBusiness(Business.getCurrentBusiness(so, request));
			} else {
				if(request.getParameter("MSG_CONTEXT_NO") != null) {
					if(control.getBusiness().getContextNumber() != Integer.parseInt(request.getParameter("MSG_CONTEXT_NO"))) {
						control = new ${source.name}Control();
						struct = control.struct;
						entity = control.entity;
						struct.setsUser_ID( request.getRemoteUser() );
						entity.setUsrId( request.getRemoteUser() );
						control.setBusiness(Business.getCurrentBusiness(so, request));
					}
				}
			}

			// ユーザ名のセット
			control.setUsrId( request.getRemoteUser() );
#if(${EJModifyMode})
			control.setsysUSER_CD((String)request.getRemoteUser() );
			control.setsysPLANT_CD((String)so.getAttribute("PlantCd"));
			control.setsysUSER_NAME((String)so.getAttribute( "UserName" ));
			control.setsysPLANT_NAME((String)so.getAttribute( "PlantName" ));

			// メッセージストラクト作成
			if (control.getMsgStruct() == null) {
				control.createMsgStruct();
			}

			// 画面共通パラメータの取得
			setScreenCommonParams(params, control);
#end
			// コネクションの取得
			//if(control.conn == null || control.conn.getConn() == null) { control.conn = CoreTools.getTransConnection(); }
			control.connect();
			// 表示権限設定
			ArrayList revokeCtrlList = Screen.getRevokeControlList(control.conn, control.getBusiness().getBusinessCd());
			Screen.setRevokeControlListToRequest(request, revokeCtrlList);

			try {
				// イベントの処理
				String all_false = "true";
#set($methods = 0)
#foreach($method in ${ctrl.mets.method})
#* *##if(${method.BaseMethod} == "onClick")
#*   *##if(${method.name} != "initialEvent")
#*     *##if(${velocityCount} == 1 || ${velocityCount} == 2)
				if( isClick(request, "${method.args.arg.get(1).param}") ) {
					if ( !isCryptical(request, so, params, "${method.args.arg.get(1).param}") ) return ERROR_TARGET;
					target = onClick${method.name}(request, response, so, params, control);
#if(${EJModifyMode})
					control.setButton("${method.args.arg.get(1).param}");
					all_false = "false";
				}
#end
#*     *##else
				if( isClick(request, "${method.args.arg.get(1).param}") ) {
					if ( !isCryptical(request, so, params, "${method.args.arg.get(1).param}") ) return ERROR_TARGET;
					target = onClick${method.name}(request, response, so, params, control);
#if(${EJModifyMode})
					control.setButton("${method.args.arg.get(1).param}");
					all_false = "false";
				}
#end
#*     *##end
#*   *##end
#*   *##set($methods = ${methods} + 1)
#* *##end
#end
#if(${methods} > 1)
				if( all_false == "true" ) {
					target = defaultEvent(request, response, so, params, control, refererURL);
				}

				so.setAttribute("${source.name}Control_"+request.getSession(false).getId(),control);

#else
				target = defaultEvent(request, response, so, params, control, refererURL);

				so.setAttribute("${source.name}Control_"+request.getSession(false).getId(),control);

#end
				#usercode("dev" "<eventHandling>")
					// TODO: ユーザ定義のコードを記述してください
				#end

				if(target==null) { target = DEFAULT_TARGET; }

				// targetの編集
				int exist = target.indexOf("?");
				String uri = null;
				String args = null;
				if(exist != -1) {
					uri = target.substring(0,exist);
					args = target.substring(exist+1,target.length());
					if((args != null) &&  (args.length() != 0) && (args.equals("") != true)) {
						target = uri + "?MSG_CONTEXT_NO=" + control.getBusiness().getContextNumber() + "&" + args;
					} else {
						target = uri + "?MSG_CONTEXT_NO=" + control.getBusiness().getContextNumber();
					}
				} else {
					target += "?MSG_CONTEXT_NO=" + control.getBusiness().getContextNumber();
				}

				// Servletへの属性の登録
				if (control.getBusiness().getAutoSendMessageId() != 0) {
					request.setAttribute("MSG_MESSAGE_ID", String.valueOf(control.getBusiness().getAutoSendMessageId()));
					request.setAttribute("MSG_BUSINESS_CD", control.getBusiness().getAutoSendBusinessCdTo());
					request.setAttribute("MSG_SERVLET_FORWARDED", new Object());
				}

				// JSPへの属性の登録
				request.setAttribute(JSP_BIND_NAME_Control,control);
				request.setAttribute(JSP_BIND_NAME_Struct,control.getStruct());
#if(${EJModifyMode})
				try {
					control.conn.commit();
				} catch (Exception ex){
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "Commit fault"); //コミット失敗
				}
			} catch (ExpjException ee){
				try {
					control.conn.rollback();
				} catch (Exception ex){
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "RollBack fault"); //ロールバック失敗
				}
				ee.printStackTrace();
				if(control.logInit){
					control.sysLog.severe( ee.getExpjMessage(), control.getsysUSER_CD()); //エラーメッセージ
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), ee.toString()); //エラー詳細
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "ProcessId:" + control.sp.getProcId()); //業務名
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "PlantCd:" + control.getsysPLANT_CD()); //工場コード
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "UserCd:" + control.getsysUSER_CD()); //ユーザコード
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "StructDump：" + struct); //ストラクトダンプ
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), getStackTrace((Throwable)ee)); //スタックトレース
				}
				throw ee;
			} catch(Exception e) {
				try {
					control.conn.rollback();
				} catch (Exception ex){
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "RollBack fault"); //ロールバック失敗
				}
				ExpjException ee = new ExpjException(e, "ZZ01106");
				ee.printStackTrace();
				if(control.logInit){
					control.sysLog.severe( ee.getExpjMessage(), control.getsysUSER_CD()); //エラーメッセージ
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), ee.toString()); //エラー詳細
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "ProcessId:" + control.sp.getProcId()); //業務名
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "PlantCd:" + control.getsysPLANT_CD()); //工場コード
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "UserCd:" + control.getsysUSER_CD()); //ユーザコード
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), "StructDump：" + struct); //ストラクトダンプ
					control.sysLog.severe("ZZ01006", control.getsysUSER_CD(), getStackTrace((Throwable)ee)); //スタックトレース
				}
				throw ee;
#else
			} catch(Exception e) {
				control.conn.rollback();
				e.printStackTrace();
				throw e;
#end
			} finally {
				// コネクションの切断
#set($methods = 0)
#foreach($method in ${ctrl.mets.method})
#* *##if(${method.BaseMethod} == "onClick")
#*   *##if(${method.args.arg.get(1).param} != "initialEvent")
#*     *##if(${velocityCount} == 1 || ${velocityCount} == 2)
				if((isClick(request, "${method.args.arg.get(1).param}") && bFLG_DISCONNECT_${method.args.arg.get(1).param})
#*     *##else
				|| (isClick(request, "${method.args.arg.get(1).param}") && bFLG_DISCONNECT_${method.args.arg.get(1).param})
#*     *##end
#*   *##end
#*   *##set($methods = ${methods} + 1)
#* *##end
#end
#if(${methods} > 1)
				) {
					//if(control.conn != null) {CoreTools.closeTransConnection(control.conn);}
					//control.conn = null;
					control.disconnect(control.conn);
					control.conn = null;
				} else if(bFLG_DISCONNECT_defaultEvent) {
					//if(control.conn != null) {CoreTools.closeTransConnection(control.conn);}
					//control.conn = null;
					control.disconnect(control.conn);
					control.conn = null;
				}
#else
				if(bFLG_DISCONNECT_defaultEvent) {
					//if(control.conn != null) {CoreTools.closeTransConnection(control.conn);}
					//control.conn = null;
					control.disconnect(control.conn);
					control.conn = null;
				}
#end
			}
			return target;
#if(${EJModifyMode})
		} catch (ExpjException ee){
			ee.setToRequest(request);
			return ERROR_TARGET;
		} catch (FoundationException e) {
			ExpjException ee = new ExpjException(e, "ZZ01106");
			ee.printStackTrace();
			ee.setToRequest(request);
			return ERROR_TARGET;
		} catch( Exception e ) {
			ExpjException ee = new ExpjException(e, "ZZ01106");
			e.printStackTrace();
			ee.setToRequest(request);
			return ERROR_TARGET;
#else
		} catch( BusinessProcessException e ) {
			e.printStackTrace();
			LogWriter.write(Level.ALL, objMessage.getIDMsg("${source.name}-E999","イベントの処理"));
			CoreTools.saveErrorInfo(request, e);
			return ERROR_TARGET;
		} catch( SystemException e ) {
			e.printStackTrace();
			LogWriter.write(Level.ALL, objMessage.getIDMsg("${source.name}-E999","イベントの処理"));
			CoreTools.saveErrorInfo(request, e);
			return ERROR_TARGET;
		} catch( Exception e ) {
			e.printStackTrace();
			LogWriter.write(Level.ALL, objMessage.getIDMsg("${source.name}-E999","イベントの処理"));
			CoreTools.saveErrorInfo(request, "${source.name}-E999", objMessage.getIDMsg("${source.name}-E999","イベントの処理"), e.getMessage(), null, e);
			return ERROR_TARGET;
#end
		} finally {
			if(params!=null) params.clear();
		}
	}

	/**
	 * submitボタン押下時コネクションを自動的にcloseするためのフラグ
	 * 自動切断時：true（デフォルト）
	 * トランザクション継続時：false
	 * を設定します。
	 * 設定値の変更はコンストラクタで行ってください。
	 */
	private  static boolean bFLG_DISCONNECT_defaultEvent = true;
#set($methods = 0)
#foreach($method in ${ctrl.mets.method})
#* *##if(${method.BaseMethod} == "onClick")
#*   *##if(${method.args.arg.get(1).param} != "initialEvent")
	private  static boolean bFLG_DISCONNECT_${method.args.arg.get(1).param} = true;
#*   *##end
#*   *##set($methods = ${methods} + 1)
#* *##end
#end

	//////////////////////////////

	// 初期化処理
	public void init(ServletConfig config) throws ServletException
	{
		super.init( config );
		return;
	}

	// doGetメソッドの処理
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
#if(${EJModifyMode})
		FlashServletRequest req = new FlashServletRequest(request);
		move( eventHandling(req, response), req, response );
#else
		move( eventHandling(request, response), request, response );
#end
		return;
	}

	// doPostメソッドの処理
	public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
#if(${EJModifyMode})
		FlashServletRequest req = new FlashServletRequest(request);
		move( eventHandling(req, response), req, response );
#else
		move( eventHandling(request, response), request, response );
#end
		return;
	}

	//////////////////////////////

	/*
	 * 指定されたURLに移動します。
	 *
	 * @param url 移動先URL
	 * @param request HttpRequestクラスインスタンス
	 * @param response HttpResponseクラスインスタンス
	 *
	 */
	void move(String url, HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
#if(${EJModifyMode})
		// JSPにリクエストのフォワード
#else
		// JSPにリスエスとのフォワード
#end
		if(url != null) {
			if (!url.startsWith("/")) {
				url = "/" + url;
			}
			ServletContext sContext = getServletContext();
			sContext.getRequestDispatcher(url).forward(request, response);
		}
		return;
	}

	/**
	 * 参照元URLを取得します。
	 */
	String getReferURL(HttpServletRequest request)
	{
		return (request.getHeader("referer") == null ? request.getRequestURI() : request.getHeader("referer"));
	}

	/*
	 * クリックされたかどうかをチェックします
	 */
	boolean isClick(HttpServletRequest request, String buttonName)
	{
		// Servlet間遷移の場合は、クリックを判定しない。
		if (request.getAttribute("MSG_SERVLET_FORWARDED") != null) {
			return false;
		}

		boolean click = false;
		click = (request.getParameterValues(buttonName)==null ? false : true);
#if(${EJModifyMode})
		if ( (!click) && ( "CsvIn".equals(buttonName) ) ) {
			boolean bCsvIn = false;
			try {
				bCsvIn = request.getContentType().toLowerCase().startsWith("multipart/form-data");
			} catch ( Exception e ) {
				bCsvIn = false;
			}
			click = bCsvIn;
		}
#end
		#usercode("dev" "<isClick>")
		// TODO: ユーザ定義のコードを記述してください
		#end
		return click;
	}

	static private boolean bFLG_CSRF = true;
	static private String algorithm = null;

	/*
	 * ＣＳＲＦ対策として、ハッシュ化されたセッションIDの画面からの受信状況をチェックします
	 */
	boolean isCryptical(HttpServletRequest request, HttpSession so, Hashtable params, String buttonName) throws ExpjException
	{
		if( request == null ) {
			ExpjException ee = new ExpjException((Exception)null, "ZZ01106");
			ee.add(new ExpjMessage("ZZ01006", "request is null"));
			throw ee;
		}

		if ( "CsvIn".equals(buttonName) ) {
			if ( request.getParameterValues(buttonName) == null ) {
				try {
					if ( request.getContentType().toLowerCase().startsWith("multipart/form-data") ) {
						// CSVアップロード時はチェック対象外
						return true;
					}
				} catch ( Exception e ) {// NO ACTION}
				}
			}
		}

		if( bFLG_CSRF ) {
			ExpjException ee = new ExpjException((Exception)null, "ZZ01106");
			if ( so == null ) {
				ee.add(new ExpjMessage("ZZ01006", "session is null"));
				throw ee;
			}
			String sessionId = so.getId();
			if( sessionId == null ) {
				ee.add(new ExpjMessage("ZZ01006", "id from session is null"));
				throw ee;
			}

			if ( params == null ) {
				ee.add(new ExpjMessage("ZZ01006", "parameters is null"));
				throw ee;
			}
			String[] hashes = (String[])params.get("ORTEUS_HASHED");
			String hashed = null;
			if ( ( hashes != null ) && ( hashes.length > 0 ) ) {
				hashed = hashes[0];
			}
			if( hashed == null ) {
				ee.add(new ExpjMessage("ZZ01006", "keyword from screen is null"));
				throw ee;
			}

			if (algorithm == null) {
				algorithm = "SHA-1";
				try {
					algorithm = AppServerResources.getInstance().getString("orteus.csrf.algorithm");
				} catch(Exception e) {
					// NO ACTION
				}
			}
			String sessionIdHash = XafTools.getCryptString(sessionId, algorithm);
			if ( !sessionIdHash.equals(hashed) ) {
				ee.add(new ExpjMessage("ZZ01006", "session id hash is NG"));
				throw ee;
			}
		}
		return true;
	}

	/*
	 * Servlet情報の取得
	 */
	public String getServletInfo()
	{
		return "${Package}.${ctrl.name}Servlet";
	}

	/**
	 * 消滅時の処理
	 */
	public void destroy()
	{
		objMessage = null;
	}

	/*
	 * 標準コンストラクタ
	 */
	public ${ctrl.name}Servlet()
	{
		#usercode("dev" "<${ctrl.name}_DisConnect_FLG>")
		// submitボタン押下時コネクションを自動的にcloseするためのフラグ 自動切断時：true（デフォルト）
		bFLG_DISCONNECT_defaultEvent = true;
#* *##set($methods = 0)
#* *##foreach($method in ${ctrl.mets.method})
#*   *##if(${method.BaseMethod} == "onClick")
#*     *##if(${method.args.arg.get(1).param} != "initialEvent")
		bFLG_DISCONNECT_${method.args.arg.get(1).param} = true;
#*     *##end
#*     *##set($methods = ${methods} + 1)
#*   *##end
#* *##end

		#end

		#usercode("dev" "<${ctrl.name}Servlet>")
//			bFLG_CSRF = false; // CSRFのための判定を行わない場合は、コメントアウトをはずしてください

			// TODO: ユーザ定義のコードを記述してください
		#end
	}

	//////////////////////////////

}
